
// Async Processor for a #arg_count# argument coroutine.
template<#template_args#>
class AsyncProcessorWithErrors#arg_count#
{
public:
    AsyncProcessorWithErrors#arg_count#(#function_args#) :
        context(context),
        #init_list#
    {
    }

    void operator()(AsioExpress::Error error = AsioExpress::Error())
    {
      CHECK_MSG(!context.IsComplete(), "Async. processor invoked but it has already completed.");

      context.Start();

      try
      {
        f(error, context#func_call_args#);
        context.Exit();
      }
      ASIOEXPRESS_CATCH_ERROR_AND_DO( context.Complete(error) );
    }

private:
    Context context;
    #member_def#
};

template<#template_args#>
void RunProcWithErrors(#function_args#)
{
  context.Start();

  try
  {
    f(AsioExpress::Error(), context#func_call_args#);
    context.Exit();
  }
  ASIOEXPRESS_CATCH_ERROR_AND_DO( context.Complete(error) );
}

template<#template_args#>
AsioExpress::CompletionHandler PushProcWithErrors(#function_args#)
{
    AsyncProcessorWithErrors#arg_count#<#template_call_args#> proc(f,context#func_call_args#);
    return proc;
}
