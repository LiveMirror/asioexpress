//               Copyright Ross MacGregor 2014
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#pragma once

#include "AsioExpressError/Error.hpp"
#include "AsioExpressError/Check.hpp"
#include "AsioExpress/CompletionHandler.hpp"

namespace AsioExpress {

///
/// This class is used to create a parent completion handler that will be
/// called when all child completion handlers are complete. New child
/// completion handlers are generated by calling the NewChild() method. If any
/// errors are passed into the child completion handlers only the last
/// error reported is passed into the parent completion handler. Note that
/// the Complete() method must be called for proper operation.
///
class ParentCompletionHandler
{
public:
    ParentCompletionHandler(AsioExpress::CompletionHandler const & completionHandler) :
        isComplete(new bool(false)),
        outstandingCalls(new int(0)),
        lastError(new AsioExpress::Error),
        completionHandler(completionHandler)
    {
    }

    ///
    /// This method creates a new child completion handler.
    ///
    ParentCompletionHandler NewChild()
    {
        ++(*outstandingCalls);
        return *this;
    }

    ///
    /// Call this method to indicate there are no more child completion
    /// handlers to process.
    ///
    void Complete()
    {
        *isComplete = true;
        HandleCompletion();
    }

    ///
    /// The completion handler function signature.
    ///
    void operator()(AsioExpress::Error error)
    {
        if (error)
            *lastError = error;

        CHECK(*outstandingCalls > 0);
        --(*outstandingCalls);

        HandleCompletion();
    }

private:
    void HandleCompletion()
    {
        if (*isComplete && *outstandingCalls == 0)
        {
            completionHandler(*lastError);
            completionHandler = 0;
        }
    }

    boost::shared_ptr<bool>                     isComplete;
    boost::shared_ptr<int>                      outstandingCalls;
    boost::shared_ptr<AsioExpress::Error>       lastError;
    AsioExpress::CompletionHandler              completionHandler;
};

} // namespace AsioExpress
